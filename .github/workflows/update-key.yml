name: 🔄 Actualizar Key Automática

on:
  schedule:
    - cron: '* * * * *'  # Cada minuto
  workflow_dispatch:

jobs:
  update-key:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🌐 Obtener HTML
        id: fetch
        run: |
          curl -s "https://lilwero20.github.io/kesfagd/" -o page.html
          echo "Tamaño del HTML: $(wc -c page.html) bytes"
          echo "Contenido (primeras 100 líneas):"
          head -100 page.html

      - name: 🔍 Extraer key
        id: extract
        run: |
          KEY=$(grep -oP 'WERO-\w{12}' page.html | head -1)
          if [ -z "$KEY" ]; then
            echo "::error::NO se encontró ninguna key en el HTML"
            exit 1
          fi
          echo "Key extraída: $KEY"
          echo "KEY=$KEY" >> $GITHUB_ENV

      - name: 💾 Comparar keys
        id: compare
        run: |
          echo "Key nueva: ${{ env.KEY }}"
          
          if [ -f "key.txt" ]; then
            OLD_KEY=$(cat key.txt)
            echo "Key actual: $OLD_KEY"
          else
            OLD_KEY=""
            echo "key.txt no existe (se creará)"
          fi

          if [ "$OLD_KEY" == "${{ env.KEY }}" ]; then
            echo "::notice::Key sin cambios"
            echo "NEEDS_UPDATE=false" >> $GITHUB_ENV
          else
            echo "::warning::Key cambiada (vieja: $OLD_KEY, nueva: ${{ env.KEY }})"
            echo "NEEDS_UPDATE=true" >> $GITHUB_ENV
          fi

      - name: ⬆️ Actualizar repositorio
        if: env.NEEDS_UPDATE == 'true'
        run: |
          echo "${{ env.KEY }}" > key.txt
          
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@users.noreply.github.com"
          
          git add key.txt
          git status
          git commit -m "🔄 Actualización automática: ${{ env.KEY }}"
          
          echo "Token: ${{ secrets.GITHUB_TOKEN }}"
          git push origin HEAD:${{ github.ref }}
